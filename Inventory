#ifndef INVENTORY_H
#define INVENTORY_H

#include "product.h"
#include <vector>

class Inventory {
public:
    void addProduct(const Product& product);
    void removeProduct(int id);
    void updateProductQuantity(int id, int quantity);
    void displayInventory() const;

private:
    std::vector<Product> products;

    int findProductIndexById(int id) const;
};

#endif // INVENTORY_H
#include "inventory.h"
#include <iostream>

void Inventory::addProduct(const Product& product) {
    products.push_back(product);
}

void Inventory::removeProduct(int id) {
    int index = findProductIndexById(id);
    if (index != -1) {
        products.erase(products.begin() + index);
        std::cout << "Product with ID " << id << " removed.\n";
    } else {
        std::cout << "Product with ID " << id << " not found.\n";
    }
}

void Inventory::updateProductQuantity(int id, int quantity) {
    int index = findProductIndexById(id);
    if (index != -1) {
        products[index].setQuantity(quantity);
        std::cout << "Quantity updated for Product ID " << id << ".\n";
    } else {
        std::cout << "Product with ID " << id << " not found.\n";
    }
}

void Inventory::displayInventory() const {
    if (products.empty()) {
        std::cout << "Inventory is empty.\n";
    } else {
        for (const auto& product : products) {
            std::cout << product.toString() << std::endl;
        }
    }
}

int Inventory::findProductIndexById(int id) const {
    for (size_t i = 0; i < products.size(); ++i) {
        if (products[i].getId() == id) {
            return i;
        }
    }
    return -1;
}
